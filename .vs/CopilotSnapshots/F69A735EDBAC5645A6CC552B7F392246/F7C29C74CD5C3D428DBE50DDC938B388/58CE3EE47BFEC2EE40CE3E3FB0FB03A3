using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Speech.Synthesis;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media.Imaging;

namespace VtuberNeuroSama
{
    public partial class MainWindow : Window
    {
        private readonly HttpClient _httpClient = new HttpClient();
        private readonly SpeechSynthesizer _tts = new SpeechSynthesizer();
        private readonly List<string> _context = new List<string>();
        private readonly HashSet<string> _bannedWords = new HashSet<string> { "badword1", "badword2" }; // Add more as needed

        public MainWindow()
        {
            InitializeComponent();
            SendButton.Click += SendButton_Click;
            ChatInput.KeyDown += (s, e) => { if (e.Key == System.Windows.Input.Key.Enter) SendButton_Click(s, e); };
            LoadAvatar();
        }

        private void LoadAvatar()
        {
            // Load a static avatar image from output directory
            try
            {
                var path = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "avatar.png");
                AvatarImage.Source = new BitmapImage(new Uri(path));
            }
            catch { /* Avatar image not found */ }
        }

        private async void SendButton_Click(object sender, RoutedEventArgs e)
        {
            var userMessage = ChatInput.Text.Trim();
            if (string.IsNullOrEmpty(userMessage)) return;
            if (ContainsBannedWord(userMessage))
            {
                ChatHistory.Items.Add($"[MOD] Message blocked.");
                ChatInput.Clear();
                return;
            }
            ChatHistory.Items.Add($"You: {userMessage}");
            _context.Add($"User: {userMessage}");
            ChatInput.Clear();
            var aiReply = await GetOllamaResponse(string.Join("\n", _context));
            ChatHistory.Items.Add($"Neuro-sama: {aiReply}");
            _context.Add($"Neuro-sama: {aiReply}");
            _tts.SpeakAsync(aiReply);
        }

        private bool ContainsBannedWord(string message)
        {
            var lower = message.ToLower();
            return _bannedWords.Any(bw => lower.Contains(bw));
        }

        private async Task<string> GetOllamaResponse(string prompt)
        {
            var requestBody = new { model = "llama2", prompt = prompt };
            var content = new StringContent(JsonSerializer.Serialize(requestBody), Encoding.UTF8, "application/json");
            try
            {
                var response = await _httpClient.PostAsync("http://localhost:11434/api/generate", content);
                var responseString = await response.Content.ReadAsStringAsync();
                using var doc = JsonDocument.Parse(responseString);
                if (doc.RootElement.TryGetProperty("response", out var reply))
                    return reply.GetString();
                return "[Error: No response from Ollama]";
            }
            catch (Exception ex)
            {
                return $"[Error: {ex.Message}]";
            }
        }
    }
}
